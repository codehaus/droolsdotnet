package org.drools.benchmark.manners
import org.drools.dotnet.examples

rule assignFirstSeat
    when
        context : Context( State == Context.START_UP )
        guest : Guest()
        count : Count()
    then
        string guestName = guest.Name;
        
        Seating seating =  new Seating( count.Value, 1, true, 1, guestName, 1, guestName);
        assert( seating );
        
        Path path = new Path( count.Value, 1, guestName );
        assert( path );
        
        count.Value = count.Value + 1;        
        modify( count );

		System.Console.Out.WriteLine( "assign first seat :  " + seating + " : " + path );

        context.State = Context.ASSIGN_SEATS;        
        modify( context );
end

rule findSeating
   when 
       context : Context( State == Context.ASSIGN_SEATS )
       Seating( seatingId:Id, seatingPid:Pid, PathDone == true, seatingRightSeat:RightSeat, seatingRightGuestName:RightGuestName )
       Guest( Name == seatingRightGuestName, rightGuestSex:Sex, rightGuestHobby:Hobby )
       Guest( leftGuestName:Name , Sex != rightGuestSex, Hobby == rightGuestHobby )

       count : Count()

       not ( Path( Id == seatingId, GuestName == leftGuestName) )
       not ( Chosen( Id == seatingId, GuestName == leftGuestName, Hobby == rightGuestHobby) )
   then
       int rightSeat = seatingRightSeat;
       int seatId = seatingId;
       int countValue = count.Value;
       
       Seating seating = new Seating( countValue, seatId, false, rightSeat, seatingRightGuestName, rightSeat + 1, leftGuestName );
       assert( seating );     
                            
       Path path = new Path( countValue, rightSeat + 1, leftGuestName  );
       assert( path );
       
       Chosen chosen = new Chosen( seatId, leftGuestName, rightGuestHobby );
       assert( chosen  );

	   System.Console.Out.WriteLine( "find seating : " + seating + " : " + path + " : " + chosen);

       count.Value = countValue + 1;
       modify( count );

       context.State = Context.MAKE_PATH;
       modify( context );
end

rule makePath
    when 
        Context( State == Context.MAKE_PATH )
        Seating( seatingId:Id, seatingPid:Pid, PathDone == false )
        Path( Id == seatingPid, pathGuestName:GuestName, pathSeat:Seat )
        not Path( Id == seatingId, GuestName == pathGuestName )
    then
        assert( new Path( seatingId, pathSeat, pathGuestName ) );
end 

rule pathDone
    when
        context : Context( State == Context.MAKE_PATH ) 
        seating : Seating( PathDone == false ) 
    then
        seating.PathDone = true; 
        modify( seating );
        
        context.State = Context.CHECK_DONE; 
		modify( context );
end


rule areWeDone
    when
        context : Context( State == Context.CHECK_DONE ) 
        LastSeat( lastSeat: Seat )
        Seating( RightSeat == lastSeat ) 
    then
        context.State = Context.PRINT_RESULTS; 
        modify( context );
end

rule continue
    when
        context : Context( State == Context.CHECK_DONE ) 
    then
        context.State = Context.ASSIGN_SEATS; 
        modify( context );
end


rule allDone
    when
        context : Context( State == Context.PRINT_RESULTS ) 
    then
    	System.Console.Out.WriteLine( "All Done" );
end

//query getResults
//	context : Context( State == Context.PRINT_RESULTS ) 
//end 
 